name: Build Heatmaps (Dynamic Prompt)

on:
  workflow_dispatch:
    inputs:
      repos:
        description: "Repo list (owner/name). One per line or comma-separated."
        required: true
        type: string
      author_email:
        description: "Filter by author email (optional; blank = all)"
        required: false
        type: string
      ignore_merges:
        description: "1 = exclude merges (default 1)"
        required: false
        type: string
        default: "1"
      lookback_days:
        description: "Days of history (default 365)"
        required: false
        type: string
        default: "365"

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.mk.outputs.matrix }}
    steps:
      - name: Build matrix JSON from input
        id: mk
        shell: bash
        run: |
          set -euo pipefail

          # Normalize commas/newlines -> one repo per line
          printf '%s\n' "${{ inputs.repos }}" \
            | tr ',' '\n' \
            | sed 's/^[[:space:]]*//; s/[[:space:]]*$//' \
            | awk 'NF>0' > /tmp/repos.txt

          # Validate and build JSON: {"include":[{"repo":"owner/name"}, ...]}
          {
            echo '{ "include": ['
            first=true
            while IFS= read -r r; do
              [[ "$r" == */* ]] || { echo "Invalid repo '$r' (expected owner/name)" >&2; exit 1; }
              $first || echo ','
              printf '  {"repo":"%s"}' "$r"
              first=false
            done < /tmp/repos.txt
            echo '] }'
          } > /tmp/matrix.json

          # ðŸ‘‰ Write multi-line output with heredoc
          echo "matrix<<JSON" >> "$GITHUB_OUTPUT"
          cat /tmp/matrix.json >> "$GITHUB_OUTPUT"
          echo "JSON" >> "$GITHUB_OUTPUT"


  build:
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.prepare.outputs.matrix) }}

    steps:
      - name: Checkout this repo (heatmap host)
        uses: actions/checkout@v4

      - name: Derive file-safe name from repo
        id: names
        shell: bash
        run: |
          SAFE=$(echo "${{ matrix.repo }}" | sed 's#/#-#g')
          echo "SAFE_NAME=$SAFE" >> $GITHUB_ENV

      - name: Checkout target repo (full history)
        uses: actions/checkout@v4
        with:
          repository: ${{ matrix.repo }}
          path: target-repo
          fetch-depth: 0
          token: ${{ secrets.TARGET_REPO_TOKEN || github.token }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Generate SVG heatmap
        env:
          REPO_DIR: target-repo
          AUTHOR_EMAIL: ${{ inputs.author_email }}
          IGNORE_MERGES: ${{ inputs.ignore_merges || '1' }}
          LOOKBACK_DAYS: ${{ inputs.lookback_days || '365' }}
          OUTPUT_SVG: public/heatmap-${{ env.SAFE_NAME }}.svg
        run: |
          python scripts/fetch_commits_and_render.py
          echo "Wrote public/heatmap-${{ env.SAFE_NAME }}.svg"

      - name: Build gallery index.html
        shell: bash
        run: |
          set -euo pipefail
          BASE="https://${GITHUB_REPOSITORY_OWNER}.github.io/${GITHUB_REPOSITORY#*/}"
          mkdir -p public
          {
            echo '<!doctype html><meta charset="utf-8"><meta name="viewport" content="width=device-width,initial-scale=1"><title>Repo Heatmaps</title>'
            echo '<style>body{font-family:system-ui,Segoe UI,Arial;margin:24px}h1{margin:0 0 16px}.grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(360px,1fr));gap:24px}.card{border:1px solid #e5e7eb;border-radius:12px;padding:16px;box-shadow:0 1px 2px rgba(0,0,0,.05)}.title{font-size:14px;color:#444;margin:0 0 8px;word-break:break-all}.link{font-size:12px;color:#2563eb;text-decoration:none}</style>'
            echo '<h1>Repo Heatmaps</h1><div class="grid">'
            for f in public/*.svg; do
              [ -e "$f" ] || continue
              name=$(basename "$f"); label="${name#heatmap-}"; label="${label%.svg}"
              echo "<div class=\"card\"><p class=\"title\">$label</p>"
              echo "<a class=\"link\" href=\"$BASE/$name\">$BASE/$name</a>"
              echo "<div style=\"margin-top:8px\"><img src=\"$name\" alt=\"$label\" style=\"max-width:100%\"></div></div>"
            done
            echo '</div>'
          } > public/index.html

      - name: Upload artifact for GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: public

      - name: List URLs in job summary
        shell: bash
        run: |
          BASE="https://${GITHUB_REPOSITORY_OWNER}.github.io/${GITHUB_REPOSITORY#*/}"
          echo "## Published URLs" >> "$GITHUB_STEP_SUMMARY"
          echo "- Home: ${BASE}/" >> "$GITHUB_STEP_SUMMARY"
          for f in public/*.svg; do
            echo "- ${BASE}/$(basename "$f")" >> "$GITHUB_STEP_SUMMARY"
          done

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4
